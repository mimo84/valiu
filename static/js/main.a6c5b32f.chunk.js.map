{"version":3,"sources":["codingChallenge/VirtualScroller.tsx","codingChallenge/useSocket.ts","common/contants.ts","loader/Loader.tsx","codingChallenge/CodingChallenge.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["VirtualScroller","data","row","scrollPosition","setScrollPosition","maxIndex","length","itemHeight","totalHeight","useState","top","itemsAbove","bottom","viewData","paddingHeight","setPaddingHeight","runScroller","scrollTop","index","Math","floor","tolerance","visualizeData","amount","nuTopPaddingHeight","max","nuBottomPaddingHeight","scrollElement","current","useRef","useEffect","scrollTo","offset","limit","start","end","min","slice","className","ref","style","height","onScroll","e","currentTarget","map","useSocket","tags","setTags","loading","setLoading","faker","random","alphaNumeric","key","setKey","socketRef","io","transports","on","tag","concat","t","id","filter","disconnect","addTag","emit","editTag","deleteTag","Loader","rndNumber","CodingChallenge","tagAction","undefined","editTarget","editedTag","find","content","edit","brandNewTag","color","uuid","setEdit","setEditTarget","type","value","autoFocus","onChange","onKeyDown","placeholder","v","i","backgroundColor","onClick","target","actionEdit","App","href","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6c5b32f.chunk.js","sourcesContent":["import React, {\n  Dispatch,\n  SetStateAction,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { ITag } from './CodingChallenge';\nimport './CodingChallenge.css';\n\ninterface VirtualScrollerProps {\n  data: ITag[];\n  row: (v: ITag, i: number) => JSX.Element;\n  scrollPosition: number;\n  setScrollPosition: Dispatch<SetStateAction<number>>;\n}\n\nconst VirtualScroller: React.FC<VirtualScrollerProps> = ({\n  data,\n  row,\n  scrollPosition,\n  setScrollPosition,\n}) => {\n  const minIndex = 0;\n  const maxIndex = data.length;\n  const startIndex = 1;\n  const itemHeight = 40;\n  const amount = 15;\n  const tolerance = 2;\n\n  // 1) height of the visible part of the viewport (px)\n  const viewportHeight = amount * itemHeight;\n  // 2) total height of rendered and virtualized items (px)\n  const totalHeight = (maxIndex - minIndex + 1) * itemHeight;\n\n  // 3) single viewport outlet height, filled with rendered but invisible rows (px)\n  const toleranceHeight = tolerance * itemHeight;\n\n  // 4) all rendered rows height, visible part + invisible outlets (px)\n  // const bufferHeight = viewportHeight + 2 * toleranceHeight;\n  // 5) number of items to be rendered, buffered dataset length (pcs)\n  const bufferedItems = amount + 2 * tolerance;\n\n  // 6) how many items will be virtualized above (pcs)\n  const itemsAbove = startIndex - tolerance - minIndex;\n  // 7) initial height of the top padding element (px)\n  const [paddingHeight, setPaddingHeight] = useState<{\n    top: number;\n    bottom: number;\n    viewData: ITag[];\n  }>({\n    top: itemsAbove * itemHeight,\n    bottom: totalHeight - itemsAbove * itemHeight,\n    viewData: [],\n  });\n\n  const runScroller = (scrollTop: number) => {\n    const index =\n      minIndex + Math.floor((scrollTop - toleranceHeight) / itemHeight);\n    const viewData = visualizeData(index, bufferedItems);\n    const nuTopPaddingHeight = Math.max((index - minIndex) * itemHeight, 0);\n    const nuBottomPaddingHeight = Math.max(\n      totalHeight - paddingHeight.top - viewData.length * itemHeight,\n      0\n    );\n\n    setScrollPosition(scrollElement.current?.scrollTop || scrollPosition);\n\n    setPaddingHeight({\n      top: nuTopPaddingHeight,\n      bottom: nuBottomPaddingHeight,\n      viewData: viewData,\n    });\n  };\n\n  const scrollElement = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    runScroller(scrollPosition);\n    scrollElement.current?.scrollTo(0, scrollPosition);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const visualizeData = (offset: number, limit: number) => {\n    const start = Math.max(minIndex, offset);\n    const end = Math.min(offset + limit - 1, maxIndex);\n    if (start > end) {\n      return data.slice(end, start);\n    }\n    return data.slice(start, end);\n  };\n\n  return (\n    <div\n      className=\"viewport\"\n      ref={scrollElement}\n      style={{ height: viewportHeight }}\n      onScroll={(e) => runScroller(e.currentTarget.scrollTop)}\n    >\n      <div style={{ height: paddingHeight.top }}></div>\n      {paddingHeight.viewData.map(row)}\n      <div style={{ height: paddingHeight.bottom }}></div>\n    </div>\n  );\n};\n\nexport default VirtualScroller;\n","import { useEffect, useRef, useState } from 'react';\nimport { io, Socket } from 'socket.io-client/build/index';\nimport faker from 'faker';\nimport {\n  EMIT_NEW_TAG_EVENT,\n  RECEIVE_NEW_TAG_EVENT,\n  EMIT_EDIT_TAG_EVENT,\n  RECEIVE_EDIT_TAG_EVENT,\n  EMIT_DELETE_TAG_EVENT,\n  RECEIVE_DELETE_TAG_EVENT,\n  INITIAL_LIST_EVENT,\n} from '../common/contants';\nimport { ITag } from './CodingChallenge';\n\nconst SOCKET_SERVER_URL = 'https://mimo-valiu-server.herokuapp.com/';\n\nconst useSocket = () => {\n  const [tags, setTags] = useState<ITag[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [key, setKey] = useState(faker.random.alphaNumeric());\n  const socketRef = useRef<Socket>();\n\n  useEffect(() => {\n    socketRef.current = io(SOCKET_SERVER_URL, {\n      transports: ['websocket'],\n    });\n\n    socketRef.current.on(INITIAL_LIST_EVENT, (tags: ITag[]) => {\n      setTags(tags);\n      setLoading(false);\n    });\n\n    socketRef.current.on(RECEIVE_NEW_TAG_EVENT, (tag: ITag) => {\n      setTags((tags) => [tag].concat(tags));\n      setKey(faker.random.alphaNumeric());\n    });\n\n    socketRef.current.on(RECEIVE_EDIT_TAG_EVENT, (tag: ITag) => {\n      setTags((tags) => {\n        const nuTags = tags.map((t) => {\n          return t.id === tag.id ? tag : t;\n        });\n\n        return nuTags;\n      });\n      setKey(faker.random.alphaNumeric());\n    });\n\n    socketRef.current.on(RECEIVE_DELETE_TAG_EVENT, (id: string) => {\n      setTags((tags) => {\n        const nuTags = tags.filter((t) => t.id !== id);\n        return nuTags;\n      });\n      setKey(faker.random.alphaNumeric());\n    });\n\n    return () => {\n      socketRef.current?.disconnect();\n    };\n  }, []);\n\n  const addTag = (tag: ITag) => {\n    socketRef.current?.emit(EMIT_NEW_TAG_EVENT, tag);\n  };\n\n  const editTag = (tag: ITag) => {\n    socketRef.current?.emit(EMIT_EDIT_TAG_EVENT, tag);\n  };\n\n  const deleteTag = (id: string) => {\n    socketRef.current?.emit(EMIT_DELETE_TAG_EVENT, id);\n  };\n\n  return { tags, addTag, editTag, deleteTag, loading, key };\n};\n\nexport default useSocket;\n","export const EMIT_NEW_TAG_EVENT = 'emit new tag';\nexport const RECEIVE_NEW_TAG_EVENT = 'receive new tag';\n\nexport const EMIT_EDIT_TAG_EVENT = 'emit edit tag';\nexport const RECEIVE_EDIT_TAG_EVENT = 'receive edit tag';\n\nexport const EMIT_DELETE_TAG_EVENT = 'emit delete tag';\nexport const RECEIVE_DELETE_TAG_EVENT = 'receive delete tag';\n\nexport const INITIAL_LIST_EVENT = 'initialList';\n","import React from 'react';\nimport './loader.css';\n\ninterface LoaderProps {}\n\nconst Loader: React.FC<LoaderProps> = () => {\n  return (\n    <div className=\"lds-ellipsis\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { KeyboardEvent, useState } from 'react';\nimport VirtualScroller from './VirtualScroller';\nimport { v4 as uuid } from 'uuid';\nimport useSocket from './useSocket';\nimport Loader from '../loader/Loader';\n\nexport interface ITag {\n  color: string;\n  content: string;\n  id: string;\n}\n\nconst rndNumber = () => Math.floor(Math.random() * 255);\nconst randomColor = () =>\n  `rgba(${rndNumber()},${rndNumber()}, ${rndNumber()} )`;\n\nconst CodingChallenge: React.FC = () => {\n  const { tags, addTag, editTag, deleteTag, loading, key } = useSocket();\n\n  const actionDelete = (id: string) => {\n    deleteTag(id);\n  };\n\n  const actionEdit = (index: string) => {\n    const target = tags.find((t) => t.id === index);\n    setEdit(target?.content || '');\n    setEditTarget(target);\n  };\n  const onInputEnter = (e: KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      tagAction();\n    }\n  };\n\n  const onEditInputChange = (e: any) => {\n    setEdit(e.currentTarget.value);\n  };\n\n  const tagAction = () => {\n    if (editTarget !== undefined) {\n      const editedTag = tags.find((t) => {\n        return t.id === editTarget?.id;\n      });\n\n      if (editedTag) {\n        editTag({ ...editedTag, content: edit });\n      }\n      setScrollPosition(scrollPosition);\n    } else {\n      const brandNewTag = {\n        color: randomColor(),\n        content: edit,\n        id: uuid(),\n      };\n      addTag(brandNewTag);\n      setScrollPosition(0);\n    }\n\n    setEdit('');\n    setEditTarget(undefined);\n  };\n\n  const [edit, setEdit] = useState('');\n  const [editTarget, setEditTarget] = useState<ITag | undefined>(undefined);\n  const [scrollPosition, setScrollPosition] = useState(0);\n\n  const RowTemplate = (v: ITag, i: number) => {\n    return (\n      <div className=\"item-container\" key={`${v.color}_${i}`}>\n        <span\n          className=\"item-color\"\n          style={{\n            backgroundColor: `${v.color}`,\n          }}\n        >\n          &nbsp;\n        </span>\n        <span className=\"item-content\">{v.content}</span>\n        <div className=\"item-actions\">\n          <button className=\"action-button\" onClick={() => actionEdit(v.id)}>\n            Editar\n          </button>\n\n          <button className=\"action-button\" onClick={() => actionDelete(v.id)}>\n            Borrar\n          </button>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <>\n      <h2>Coding Challenge! (rendering: {tags.length})</h2>\n\n      <div className=\"container\">\n        <div className=\"tag-list\">Etiquetas {loading && <Loader />}</div>\n        {loading === false && (\n          <>\n            <input\n              type=\"text\"\n              className=\"input\"\n              value={edit}\n              autoFocus\n              onChange={onEditInputChange}\n              onKeyDown={onInputEnter}\n              placeholder=\"Añadir etiqueta\"\n            />\n\n            <VirtualScroller\n              scrollPosition={scrollPosition}\n              setScrollPosition={setScrollPosition}\n              key={key}\n              data={tags}\n              row={RowTemplate}\n            />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CodingChallenge;\n","import React from 'react';\n\nimport './App.css';\nimport CodingChallenge from './codingChallenge/CodingChallenge';\n// https://www.notion.so/Challenge-for-d377a1a1de674c068a3b5c01726c15ae\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <a href=\"/valiu\" className=\"brand\">\n          <img\n            src=\"https://uploads-ssl.webflow.com/5ea3bbe508815409b2adc81a/5ea3bc7a27484bf404a45aa5_logo_valiu.svg\"\n            alt=\"Valiu Logo\"\n          />\n        </a>\n      </header>\n\n      <section className=\"main-section\">\n        <CodingChallenge />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}